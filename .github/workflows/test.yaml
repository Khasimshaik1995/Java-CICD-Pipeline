name: Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  install:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

  build:
    runs-on: ubuntu-latest
    needs: install
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Build with Maven (Skip Tests)
        run: mvn clean package -DskipTests

      - name: Upload Build Artifact (JAR)
        uses: actions/upload-artifact@v4
        with:
          name: java-app-jar
          path: target/codekamikaze-1.0.0.jar

  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Build and Run Tests with Maven
        run: mvn clean verify

      - name: List JaCoCo coverage report
        run: |
          ls -R target/site/jacoco || echo "No coverage report found"

      - name: Upload JaCoCo report as artifact
        uses: actions/upload-artifact@v4
        with:
          name: jacoco-report
          path: target/site/jacoco/


  # sonarcloud:
  #   runs-on: ubuntu-latest
  #   needs: test
  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: SonarCloud Scan
  #       uses: SonarSource/sonarcloud-github-action@v2
  #       env:
  #         
  #       with:
  #         args: >
        
  #         -Dsonar.projectKey: security3124314_sonarqube
  #         -Dsonar.organization: security3124314
  #         -Dsonar.host.url: https://sonarcloud.io


  semgrep:
    runs-on: ubuntu-latest
    # needs: sonarcloud
    steps:
      - uses: actions/checkout@v3
      - name: Install Semgrep
        run: |
          sudo snap install semgrep --classic
      - name: Run Semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          config: auto

  dependency-check:
    runs-on: ubuntu-latest
    needs: semgrep
    steps:
      - uses: actions/checkout@v3
  
      - name: Install Trivy CLI (v0.38.3)
        run: |
          sudo apt update
          sudo apt install -y wget apt-transport-https
          wget https://github.com/aquasecurity/trivy/releases/download/v0.38.3/trivy_0.38.3_Linux-64bit.deb
          sudo dpkg -i trivy_0.38.3_Linux-64bit.deb
          trivy --version

      - name: Run Trivy Scan
        run: |
          trivy fs . --format table --severity HIGH,CRITICAL


  malware-scan:
    runs-on: ubuntu-latest
    needs: dependency-check
    steps:
      - uses: actions/checkout@v3
  
      - name: Install ClamAV and run scan
        run: |
          sudo apt-get update
          sudo apt-get install -y clamav
          sudo systemctl stop clamav-freshclam 
          sudo freshclam
          sudo freshclam  
          clamscan -r . --infected --bell --quiet | tee malware-scan-results.txt
  
      - name: Upload scan results
        uses: actions/upload-artifact@v4
        with:
          name: malware-scan-results
          path: malware-scan-results.txt



  image-build:
    runs-on: ubuntu-latest
    needs: malware-scan
    steps:
      - uses: actions/checkout@v3
      - name: Build Docker image
        run: |
          docker build -t $DOCKER_REPO:latest .
          docker images

  image-scan:
    runs-on: self-hosted
    needs: image-build
    steps:
      - name: Trivy Docker Scan
        run: trivy image $DOCKER_REPO:latest

  image-push:
    runs-on: self-hosted
    needs: image-scan
    steps:
      - name: Docker Login
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
      - name: Docker Push
        run: docker push $DOCKER_REPO:latest

  deploy:
    runs-on: self-hosted
    needs: image-push
    steps:
      - name: ArgoCD Deploy
        run: |
          curl -sLO https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          chmod +x argocd-linux-amd64
          sudo mv argocd-linux-amd64 /usr/local/bin/argocd
          argocd login $ARGOCD_SERVER --username $ARGOCD_USERNAME --password $ARGOCD_PASSWORD --insecure
          argocd app sync app-java
          argocd app wait app-java --health --operation

  dast:
    runs-on: self-hosted
    needs: deploy
    steps:
      - name: Run OWASP ZAP DAST Scan
        run: |
          mkdir -p owasp-zap-report
          docker run -v $(pwd):/zap/wrk/:rw ghcr.io/zaproxy/zaproxy:stable zap.sh \
            -cmd -quickurl http://your-service-url \
            -quickout /zap/wrk/owasp-zap-report/report.html
      - uses: actions/upload-artifact@v3
        with:
          name: zap-report
          path: owasp-zap-report/
